apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: git-clone
spec:
  workspaces:
  - name: output
    description: The git repo will be cloned onto the volume backing this workspace
    mountPath: /workspace
  steps:
  - script: |
      #!/bin/sh
      export SUBDIR="source"
      git config --global --add user.name ${GIT_AUTHOR_NAME:-krestomatio-cibot}
      git config --global --add user.email ${GIT_AUTHOR_EMAIL:-jobcespedes@krestomatio.com}
      git config --global credential.helper store
      if [ -z "$BRANCH_NAME" ]; then
        # No branch provided
        echo "git cloning url: $REPO_URL to dir: $SUBDIR"
        git clone $REPO_URL $SUBDIR
      else
        echo "git cloning url: $REPO_URL branch $BRANCH_NAME to dir: $SUBDIR"
        git clone -b "$BRANCH_NAME" $REPO_URL $SUBDIR
      fi
    image: gcr.io/tekton-releases/github.com/tektoncd/pipeline/cmd/git-init:v0.19.0
    name: git-clone
    resources: { }
    workingDir: /workspace
  - args:
    - fetch
    - --tags
    command:
    - git
    image: gcr.io/tekton-releases/github.com/tektoncd/pipeline/cmd/git-init:v0.19.0
    name: git-tags
    workingDir: /workspace/source
  - args:
    - submodule
    - update
    - --init
    - --recursive
    command:
    - git
    image: gcr.io/tekton-releases/github.com/tektoncd/pipeline/cmd/git-init:v0.19.0
    name: git-submodule
    workingDir: /workspace/source
  - script: |
      #!/usr/bin/env bash
      if [[ ${UPDATE_VERSION:-} == "Makefile"  ]]; then
        VERSION_BUMP=${VERSION_BUMP:-patch}
        if ! [ -z ${VERSION_BUMP} ]; then
          VERSION=${VERSION:-$(git semver --next-${VERSION_BUMP} 2> /dev/null  || echo '0.0.1')}
        else
          VERSION=${VERSION:-$(git semver 2> /dev/null  || echo '0.0.1')}
        fi
        echo "${UPDATE_VERSION} version: $VERSION"
        sed -i "s@^VERSION .*@VERSION ?= ${VERSION}@" ${UPDATE_VERSION}
      fi
    image: quay.io/krestomatio/ansible
    name: prepare-makefile
    workingDir: /workspace/source
  - script: |
      #!/usr/bin/env bash
      if [[ ${PROJECT_TIMESTAMP:-} == "midnight" ]]; then
        # set midnight timestamp until podman > 2.1.0 (adds option to omit or set timestamp)
        project_timestamp=$(date -u +%Y%m%d0000)
        echo "Setting project timestamp to: ${project_timestamp}"
        find . -exec touch -t $project_timestamp '{}' \;
      fi
    image: quay.io/krestomatio/ansible
    name: project-timestamp
    workingDir: /workspace/source
