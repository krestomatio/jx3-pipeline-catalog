apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: git-clone
spec:
  stepTemplate:
    env:
    - name: HOME
      value: /tekton/home
    envFrom:
    - secretRef:
        name: jx-boot-job-env-vars
        optional: true
    name: ""
    resources:
      limits:
        cpu: 200m
        memory: 256Mi
      requests:
        cpu: 10m
        memory: 16Mi
  workspaces:
  - name: output
    description: The git repo will be cloned onto the volume backing this workspace
    mountPath: /workspace
  steps:
  - script: |
      #!/bin/sh
      export SUBDIR="source"
      git config --global --add user.name ${GIT_AUTHOR_NAME:-krestomatio-cibot}
      git config --global --add user.email ${GIT_AUTHOR_EMAIL:-jobcespedes@krestomatio.com}
      git config --global credential.helper store
      if [ -z "$PULL_BASE_REF" ] || [ "$PULL_BASE_REF" == "HEAD" ] ; then
        # No branch provided or HEAD
        echo "git cloning url: $REPO_URL to dir: $SUBDIR"
        git clone $REPO_URL $SUBDIR
      else
        echo "git cloning url: $REPO_URL branch $PULL_BASE_REF to dir: $SUBDIR"
        git clone -b "$PULL_BASE_REF" $REPO_URL $SUBDIR
      fi
      if ! [ -z "$PULL_BASE_SHA" ]; then
        echo "checked out revision: $PULL_BASE_SHA to dir: $SUBDIR"
        cd $SUBDIR
        git reset --hard $PULL_BASE_SHA
      fi
    image: gcr.io/tekton-releases/github.com/tektoncd/pipeline/cmd/git-init:v0.23.0
    name: git-clone
    resources: {}
    workingDir: /workspace
  - args:
    - fetch
    - --tags
    command:
    - git
    image: gcr.io/tekton-releases/github.com/tektoncd/pipeline/cmd/git-init:v0.23.0
    name: git-tags
    workingDir: /workspace/source
    resources: {}
  - args:
    - submodule
    - update
    - --init
    - --recursive
    command:
    - git
    image: gcr.io/tekton-releases/github.com/tektoncd/pipeline/cmd/git-init:v0.23.0
    name: git-submodule
    workingDir: /workspace/source
    resources: {}
  - image: ghcr.io/jenkins-x/jx-release-version:2.4.13
    name: next-version
    resources: {}
    workingDir: /workspace/source
    env:
    - name: NEXT_VERSION
      value: increment
    script: |
      #!/usr/bin/env sh
      if echo ${PULL_BASE_REF:-} | grep -q '^release.[[:digit:]].[[:digit:]]'; then
        echo "setting variables for VERSION in release branch: '${PULL_BASE_REF}'"
        echo "only increment patch based on release number from branch name"
        export PREVIOUS_VERSION=from-tag:v${PULL_BASE_REF#*release-}
        export NEXT_VERSION=increment
      fi
      export VERSION=$(jx-release-version)
      echo "VERSION = ${VERSION}"
      if ! [ -z ${VERSION_FILE} ]; then
        echo "Set version in VERSION file to: $VERSION"
        echo $VERSION > VERSION
      fi
      if ! [ -z ${VERSION_MAKEFILE} ]; then
        echo "Set version in Makefile to: $VERSION"
        sed -i "s@^VERSION .*@VERSION ?= ${VERSION}@" Makefile
      fi
      if ! [ -z ${VERSION_PACKAGE} ]; then
        echo "Set version in package.json to: $VERSION"
        sed -i "s@\"version\":.*@\"version\": \"$VERSION\",@" package.json
      fi
      if ! [ -z ${VERSION_CHART} ]; then
        echo "Set version in chart dir to: $VERSION"
        sed -i "s/^version:.*/version: $VERSION/" charts/$REPO_NAME/Chart.yaml
        sed -i "s/tag:.*/tag: $VERSION/" charts/$REPO_NAME/values.yaml
      fi
  - script: |
      #!/usr/bin/env bash
      if [[ ${PROJECT_TIMESTAMP:-} == "midnight" ]]; then
        # set midnight timestamp until podman > 2.1.0 (adds option to omit or set timestamp)
        project_timestamp=$(date -u +%Y%m%d0000)
        echo "Setting project timestamp to: ${project_timestamp}"
        find . -exec touch -t $project_timestamp '{}' \;
      fi
    image: quay.io/krestomatio/ansible
    name: project-timestamp
    workingDir: /workspace/source
    resources: {}
