apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: git-clone-pr
spec:
  workspaces:
  - name: output
    description: The git repo will be cloned onto the volume backing this workspace
    mountPath: /workspace
  steps:
  - script: |
      #!/bin/sh
      export SUBDIR="source"
      echo "git cloning url: $REPO_URL version $PULL_PULL_SHA to dir: $SUBDIR"
      git config --global --add user.name ${GIT_AUTHOR_NAME:-krestomatio-cibot}
      git config --global --add user.email ${GIT_AUTHOR_EMAIL:-jobcespedes@krestomatio.com}
      git config --global credential.helper store
      git clone $REPO_URL $SUBDIR
      cd $SUBDIR
      git checkout $PULL_PULL_SHA
      echo "checked out revision: $PULL_PULL_SHA to dir: $SUBDIR"
    image: gcr.io/tekton-releases/github.com/tektoncd/pipeline/cmd/git-init:v0.19.0
    name: git-clone
    resources: { }
    workingDir: /workspace
  - image: ghcr.io/jenkins-x/jx-boot:3.1.217
    name: git-merge
    resources: {}
    script: |
      #!/usr/bin/env sh
      jx gitops git merge
    workingDir: /workspace/source
  - args:
    - submodule
    - update
    - --init
    - --recursive
    command:
    - git
    image: gcr.io/tekton-releases/github.com/tektoncd/pipeline/cmd/git-init:v0.19.0
    name: git-submodule
    workingDir: /workspace/source
  - args:
    - fetch
    - --tags
    command:
    - git
    image: gcr.io/tekton-releases/github.com/tektoncd/pipeline/cmd/git-init:v0.19.0
    name: git-tags
    workingDir: /workspace/source
  - image: gcr.io/jenkinsxio/jx-release-version:2.2.3
    name: next-version
    resources: {}
    workingDir: /workspace/source
    env:
    - name: NEXT_VERSION
      value: semantic
    script: |
      #!/usr/bin/env sh
      export VERSION=$(jx-release-version)-snapshot
      if ! [ -z ${VERSION_FILE} ]; then
        echo "Set version in VERSION file to: $VERSION"
        echo $VERSION > VERSION
      fi
      if ! [ -z ${VERSION_MAKEFILE} ]; then
        echo "Set version in Makefile to: $VERSION"
        sed -i "s@^VERSION .*@VERSION ?= ${VERSION}@" Makefile
      fi
      if ! [ -z ${VERSION_PACKAGE} ]; then
        echo "Set version in package.json to: $VERSION"
        sed -i "s@\"version\":.*@\"version\": \"$VERSION\",@" package.json
      fi
      if ! [ -z ${VERSION_CHART} ]; then
        sed -i "s/^version:.*/version: $VERSION/" charts/$REPO_NAME/Chart.yaml
        sed -i "s/tag:.*/tag: $VERSION/" charts/$REPO_NAME/values.yaml
      fi
  - script: |
      #!/usr/bin/env bash
      if [[ ${PROJECT_TIMESTAMP:-} == "midnight" ]]; then
        # set midnight timestamp until podman > 2.1.0 (adds option to omit or set timestamp)
        project_timestamp=$(date -u +%Y%m%d0000)
        echo "Setting project timestamp to: ${project_timestamp}"
        find . -exec touch -t $project_timestamp '{}' \;
      fi
    image: quay.io/krestomatio/ansible
    name: project-timestamp
    workingDir: /workspace/source
